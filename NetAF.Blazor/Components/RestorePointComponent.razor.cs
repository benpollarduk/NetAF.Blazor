// <auto-generated/>
using Microsoft.AspNetCore.Components.Forms;
using Microsoft.JSInterop;
using NetAF.Blazor.Classes;
using NetAF.Logic;
using NetAF.Logic.Modes;
using NetAF.Persistence;
using NetAF.Persistence.Json;
using NetAF.Targets.Html;
using System;
using System.IO;
using System.Threading.Tasks;

namespace NetAF.Blazor.Components
{
    /// <summary>
    /// Provides a component that allows the user to create and load restore points.
    /// </summary>
    public partial class RestorePointComponent : INetAFComponent
    {
        #region Fields

        private bool show = false;
        private HtmlAdapter htmlAdapter;

        #endregion

        #region Properties

        /// <summary>
        /// Provides a callback that is invoked after a restore point is applied to a game.
        /// </summary>
        public PostRestoreCallback PostRestoreCallback { get; set; }

        #endregion

        private async void DownloadRestorePoint()
        {
            if (GameExecutor.ExecutingGame == null)
                return;

            var name = $"restore-{(GameExecutor.ExecutingGame?.Overworld?.CurrentRegion?.CurrentRoom?.Identifier.Name ?? "start")}".ToLower().Replace(' ', '-');
            var restorePoint = RestorePoint.Create(name, GameExecutor.ExecutingGame);
            var serialisation = JsonSave.ToJson(restorePoint);
            await JSRuntime.InvokeVoidAsync("saveAsFile", $"{name}.json", serialisation);
        }

        private async Task UploadRestorePoint(InputFileChangeEventArgs e)
        {
            try
            {
                var game = GameExecutor.ExecutingGame;

                if (game == null)
                    return;

                var file = e.File;
                MemoryStream ms = new MemoryStream();
                await e.File.OpenReadStream().CopyToAsync(ms);
                var bytes = ms.ToArray();
                var json = System.Text.Encoding.UTF8.GetString(bytes);
                var restorePoint = JsonSave.FromJson(json);
                game.RestoreFrom(restorePoint.Game);
                PostRestoreCallback?.Invoke(game);
                GameExecutor.Update();
            }
            catch (Exception ex)
            {
                await JSRuntime.InvokeVoidAsync("showMessageBox", $"Exception caught uploading restore point: {ex.Message}");
            }
        }

        /// <summary>
        /// Update the component.
        /// </summary>
        internal async void Update()
        {
            show = GameExecutor.ExecutingGame?.Mode?.Type == GameModeType.Interactive;
            await InvokeAsync(StateHasChanged);
        }

        #region Implementation of INetAFComponent

        /// <summary>
        /// Set the adapter.
        /// </summary>
        /// <param name="adapter">The adapter.</param>
        public void SetAdapter(HtmlAdapter adapter)
        {
            htmlAdapter = adapter;
        }

        #endregion
    }
}
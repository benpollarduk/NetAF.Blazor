// <auto-generated/>
using Microsoft.AspNetCore.Components;
using Microsoft.AspNetCore.Components.Web;
using NetAF.Blazor.Classes;
using NetAF.Logic;
using NetAF.Logic.Modes;
using NetAF.Targets.Html;
using System;
using System.Linq;

namespace NetAF.Blazor.Components
{
    /// <summary>
    /// Provides a component that allows a user to input commands to a game.
    /// </summary>
    public partial class InputComponent : INetAFComponent
    {
        #region Fields

        private string text = string.Empty;
        private bool showInput = true;
        private bool showAcknowledge = true;
        private bool showCommandPicker = true;
        private ElementReference acknowledgeButton;
        private ElementReference textInput;
        private HtmlAdapter htmlAdapter;
        private InputMode selectedInputMode = InputMode.List;

        #endregion

        #region Properties

        /// <summary>
        /// Get the command picker component.
        /// </summary>
        public CommandPickerComponent CommandPickerComponent { get; private set; }

        #endregion

        #region Methods

        private void Acknowledge()
        {
            GameExecutor.Update();
        }

        private void HandleInput(KeyboardEventArgs e)
        {
            if (e.Key == "Enter" && !string.IsNullOrWhiteSpace(text))
            {
                GameExecutor.Update(text);
                text = string.Empty;
            }
        }

        private async void UpdateInputMode()
        {
            showInput = (htmlAdapter?.Game?.Mode?.Type == GameModeType.Interactive) && (selectedInputMode == InputMode.Text);
            showCommandPicker = (htmlAdapter?.Game?.Mode?.Type == GameModeType.Interactive) && (selectedInputMode == InputMode.List);
            showAcknowledge = htmlAdapter?.Game?.Mode?.Type == GameModeType.Information;

            await InvokeAsync(StateHasChanged);
        }

        /// <summary>
        /// Update the component.
        /// </summary>
        internal async void Update()
        {
            UpdateInputMode();
            CommandPickerComponent?.Clear();

            await InvokeAsync(StateHasChanged);

            if (htmlAdapter?.Game?.Mode?.Type == GameModeType.Interactive)
            {
                var commands = htmlAdapter?.Game?.GetContextualCommands()?.ToArray() ?? [];
                CommandPickerComponent?.UpdateCommands(commands);
            }

            if (showInput && textInput.Context != null)
                await textInput.FocusAsync();

            if (showAcknowledge && acknowledgeButton.Context != null)
                await acknowledgeButton.FocusAsync();
        }

        #endregion

        #region EventHandlers

        private void OnChange(ChangeEventArgs args)
        {
            if (Enum.TryParse<InputMode>(args?.Value?.ToString() ?? string.Empty, out var mode))
            {
                selectedInputMode = mode;
                UpdateInputMode();
            }
        }

        #endregion

        #region Implementation of INetAFComponent

        /// <summary>
        /// Set the adapter.
        /// </summary>
        /// <param name="adapter">The adapter.</param>
        public void SetAdapter(HtmlAdapter adapter)
        {
            htmlAdapter = adapter;
            CommandPickerComponent?.SetAdapter(adapter);
        }

        #endregion
    }
}
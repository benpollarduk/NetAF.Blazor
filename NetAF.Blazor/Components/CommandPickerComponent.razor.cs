// <auto-generated/>
using Microsoft.AspNetCore.Components;
using NetAF.Blazor.Classes;
using NetAF.Commands;
using NetAF.Logic;
using NetAF.Targets.Html;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;

namespace NetAF.Blazor.Components
{
    /// <summary>
    /// Provides a component that allows the user to pick commands.
    /// </summary>
    public partial class CommandPickerComponent : INetAFComponent
    {
        #region Fields

        private List<ButtonTemplate> buttons = new List<ButtonTemplate>();
        private HtmlAdapter htmlAdapter;
        private CommandHelp selectedCommand;
        private Dictionary<CommandCategory, List<CommandHelp>> categorisedCommands = [];

        #endregion

        #region Properties

        /// <summary>
        /// Get or set settings to use for categories.
        /// </summary>
        public Dictionary<CommandCategory, CommandCategorySettings> CommandCategorySettings = new Dictionary<CommandCategory, CommandCategorySettings>()
        {
            { CommandCategory.Global, new(true, "crimson", 0) },
            { CommandCategory.Information, new(true, "crimson", 1) },
            { CommandCategory.Frame, new(true, "crimson", 2) },
            { CommandCategory.Movement, new(true, "navy", 3) },
            { CommandCategory.RegionMap, new(true, "navy", 4) },
            { CommandCategory.Scene, new(true, "seagreen", 5) },
            { CommandCategory.Conversation, new(true, "seagreen", 6) },
            { CommandCategory.Custom, new(true, "seagreen", 7) },
            { CommandCategory.Uncategorized, new(true, "seagreen", 8) },
        };

        #endregion

        #region Methods

        private async Task CreateCommandButtons()
        {
            foreach (var category in categorisedCommands.Keys.OrderBy(x => CommandCategorySettings[x].Order))
                foreach (var command in categorisedCommands[category].OrderBy(x => x.Command))
                    buttons.Add(new ButtonTemplate(command.Command, "btn btn-primary", $"background: {CommandCategorySettings[command.Category].HtmlColor};", EventCallback.Factory.Create(this, () => CommandButtonClicked(command))));

            await InvokeAsync(StateHasChanged);
        }


        /// <summary>
        /// Update the displayed commands.
        /// </summary>
        /// <param name="commands">The commands to display.</param>
        public async void UpdateCommands(CommandHelp[] commands)
        {
            buttons.Clear();
            categorisedCommands.Clear();

            if (CommandCategorySettings == null)
                return;

            selectedCommand = null;

            foreach (var command in commands.Where(x => CommandCategorySettings.ContainsKey(x.Category) && CommandCategorySettings[x.Category].Show))
            {
                if (!categorisedCommands.ContainsKey(command.Category))
                    categorisedCommands.Add(command.Category, new List<CommandHelp>());

                categorisedCommands[command.Category].Add(command);
            }

            await CreateCommandButtons();
        }

        /// <summary>
        /// Update the displayed prompts.
        /// </summary>
        /// <param name="prompts">The prompts to display.</param>
        public async void UpdatePrompts(Prompt[] prompts)
        {
            buttons.Clear();

            foreach (var prompt in prompts)
                buttons.Add(new ButtonTemplate(prompt.Entry, "btn btn-primary btn-prompt", string.Empty, EventCallback.Factory.Create(this, () => PromptButtonClicked(prompt.Entry))));

            buttons.Add(new ButtonTemplate("Clear", "btn btn-primary btn-cancel", string.Empty, EventCallback.Factory.Create(this, () => ClearButtonClicked())));
            await InvokeAsync(StateHasChanged);
        }

        #endregion

        #region EventHandlers
        
        private void PromptButtonClicked(string prompt)
        {
            GameExecutor.Update($"{(selectedCommand?.Command ?? string.Empty)} {prompt}");
            selectedCommand = null;
        }

        private async void ClearButtonClicked()
        {
            buttons.Clear();
            selectedCommand = null;
            await CreateCommandButtons();
        }
        
        private void CommandButtonClicked(CommandHelp commandHelp)
        {
            var prompts = GameExecutor.ExecutingGame?.GetPromptsForCommand(commandHelp);

            if (prompts?.Any() ?? false)
            {
                selectedCommand = commandHelp;
                UpdatePrompts(prompts);
            }
            else
            {
                GameExecutor.Update(commandHelp.Command);
            }
        }

        #endregion

        #region Implementation of INetAFComponent

        /// <summary>
        /// Set the adapter.
        /// </summary>
        /// <param name="adapter">The adapter.</param>
        public void SetAdapter(HtmlAdapter adapter)
        {
            htmlAdapter = adapter;
        }

        #endregion
    }
}

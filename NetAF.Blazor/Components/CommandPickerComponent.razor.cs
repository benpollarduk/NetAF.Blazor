// <auto-generated/>
using Microsoft.AspNetCore.Components;
using NetAF.Blazor.Classes;
using NetAF.Commands;
using NetAF.Logic;
using NetAF.Targets.Html;
using System.Collections.Generic;
using System.Linq;

namespace NetAF.Blazor.Components
{
    /// <summary>
    /// Provides a component that allows the user to pick commands.
    /// </summary>
    public partial class CommandPickerComponent : INetAFComponent
    {
        #region Fields

        private List<ButtonTemplate> buttons = new List<ButtonTemplate>();
        private HtmlAdapter htmlAdapter;
        private CommandHelp selectedCommand;
        private CommandHelp[] commands = [];

        #endregion

        #region Properties

        /// <summary>
        /// Get or set all colors to use for categories. Only categories included in this dictionary will be displayed.
        /// </summary>
        public Dictionary<CommandCategory, string> CommandCategoryColors = new Dictionary<CommandCategory, string>()
        {
            { CommandCategory.Frame, "crimson" },
            { CommandCategory.Scene, "seagreen" },
            { CommandCategory.Movement, "navy" },
            { CommandCategory.Custom, "seagreen" },
            { CommandCategory.Conversation, "seagreen" },
            { CommandCategory.Uncategorized, "seagreen" },
            { CommandCategory.Global, "crimson" },
            { CommandCategory.RegionMap, "navy" },
            { CommandCategory.Information, "crimson" }
        };

        #endregion

        #region Records

        /// <summary>
        /// Provides a template for a button.
        /// </summary>
        /// <param name="Text">The text to display on the button.</param>
        /// <param name="CssClass">The CSS class.</param>
        /// <param name="Style">Styling to apply to the button.</param>
        /// <param name="OnClick">A callback to invoke when the button is clicked.</param>
        private record ButtonTemplate(string Text, string CssClass, string Style, EventCallback OnClick);

        #endregion

        #region Methods

        /// <summary>
        /// Clear all buttons.
        /// </summary>
        public void Clear()
        {
            buttons.Clear();
        }

        /// <summary>
        /// Update the displayed commands.
        /// </summary>
        /// <param name="commands">The commands to display.</param>
        public async void UpdateCommands(CommandHelp[] commands)
        {
            selectedCommand = null;
            this.commands = commands.OrderBy(x => x.Command).ToArray();

            Clear();

            foreach (var command in commands.Where(x => CommandCategoryColors.ContainsKey(x.Category)))
                buttons.Add(new ButtonTemplate(command.Command, "btn btn-primary", $"background: {CommandCategoryColors[command.Category]};", EventCallback.Factory.Create(this, () => CommandButtonClicked(command))));

            await InvokeAsync(StateHasChanged);
        }

        /// <summary>
        /// Update the displayed prompts.
        /// </summary>
        /// <param name="prompts">The prompts to display.</param>
        public async void UpdatePrompts(Prompt[] prompts)
        {
            buttons.Clear();

            foreach (var prompt in prompts)
                buttons.Add(new ButtonTemplate(prompt.Entry, "btn btn-primary btn-prompt", string.Empty, EventCallback.Factory.Create(this, () => PromptButtonClicked(prompt.Entry))));

            buttons.Add(new ButtonTemplate("Clear", "btn btn-primary btn-cancel", string.Empty, EventCallback.Factory.Create(this, () => ClearButtonClicked())));
            await InvokeAsync(StateHasChanged);
        }

        private void PromptButtonClicked(string prompt)
        {
            GameExecutor.Update($"{(selectedCommand?.Command ?? string.Empty)} {prompt}");
            selectedCommand = null;
        }

        private void ClearButtonClicked()
        {
            selectedCommand = null;
            UpdateCommands(commands);
        }

        #endregion

        #region EventHandlers

        private void CommandButtonClicked(CommandHelp commandHelp)
        {
            var prompts = htmlAdapter?.Game?.GetPromptsForCommand(commandHelp);

            if (prompts?.Any() ?? false)
            {
                selectedCommand = commandHelp;
                UpdatePrompts(prompts);
            }
            else
            {
                GameExecutor.Update(commandHelp.Command);
            }
        }

        #endregion

        #region Implementation of INetAFComponent

        /// <summary>
        /// Set the adapter.
        /// </summary>
        /// <param name="adapter">The adapter.</param>
        public void SetAdapter(HtmlAdapter adapter)
        {
            htmlAdapter = adapter;
        }

        #endregion
    }
}